{"version":3,"sources":["app/LocationMarker.js","app/LocationInfoBox.js","app/Map.js","app/logo.gif","app/Loader.js","app/Header.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","lat","lng","onClick","className","icon","locationIcon","LocationInfoBox","info","id","title","Map","eventData","center","zoom","useState","locationInfo","setLocationInfo","markers","map","ev","index","categories","geometries","coordinates","bootstrapURLKeys","key","process","defaultCenter","defaultZoom","defaultProps","Loader","src","spinner","alt","Header","App","setEventData","loading","setLoading","useEffect","a","fetch","res","json","events","fetchEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAYeA,MARf,YAA+C,EAArBC,IAAqB,EAAhBC,IAAiB,IAAZC,EAAW,EAAXA,QAChC,OACI,qBAAKC,UAAU,iBAAiBD,QAASA,EAAzC,SACI,cAAC,OAAD,CAAME,KAAMC,IAAcF,UAAU,qBCKjCG,EAZS,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvB,OACI,sBAAKJ,UAAU,gBAAf,UACI,qDACA,+BACR,sCAAQ,iCAAUI,EAAKC,QACvB,yCAAW,iCAAUD,EAAKE,kBCDxBC,EAAM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAAW,EACDC,mBAAS,MADR,mBAClCC,EADkC,KACpBC,EADoB,KAGnCC,EAAUN,EAAUO,KAAI,SAACC,EAAIC,GAC/B,OAA2B,IAAxBD,EAAGE,WAAW,GAAGb,GACT,cAAC,EAAD,CAA4BR,IAAKmB,EAAGG,WAAW,GAAGC,YAAY,GAAItB,IAAKkB,EAAGG,WAAW,GAAGC,YAAY,GAAIrB,QAAS,kBAAMc,EAAgB,CAAER,GAAIW,EAAGX,GAAIC,MAAOU,EAAGV,UAAzIW,GAEzB,QAGX,OACI,sBAAKjB,UAAU,MAAf,UACU,cAAC,IAAD,CACFqB,iBAAkB,CAAEC,IAAKC,2CACzBC,cAAgBf,EAChBgB,YAAcf,EAHZ,SAKDI,IAEJF,GAAgB,cAAC,EAAD,CAAiBR,KAAMQ,QAMpDL,EAAImB,aAAe,CACfjB,OAAQ,CACJZ,IAAK,WACLC,KAAM,WAEVY,KAAM,GAGKH,QCtCA,MAA0B,iCCW1BoB,EATO,WAClB,OACI,qBAAK3B,UAAU,SAAf,SACI,qBAAK4B,IAAKC,EAASC,IAAI,cCUpBC,MAXf,WACI,OACI,wBAAQ/B,UAAU,SAAlB,SACI,+BACI,cAAC,OAAD,CAAMA,UAAU,eAAeC,KAAMC,MADzC,8CC0BG8B,MA3Bf,WAAgB,IAAD,EACqBrB,mBAAS,IAD9B,mBACNH,EADM,KACKyB,EADL,OAEiBtB,oBAAS,GAF1B,mBAENuB,EAFM,KAEGC,EAFH,KAiBb,OAbAC,qBAAU,YACS,uCAAG,gCAAAC,EAAA,6DAClBF,GAAW,GADO,SAEAG,MAAM,mDAFN,cAEZC,EAFY,gBAGOA,EAAIC,OAHX,gBAGVC,EAHU,EAGVA,OAERR,EAAaQ,GACbN,GAAW,GANO,4CAAH,qDASjBO,KACC,IAGD,gCACE,cAAC,EAAD,IAGGR,EAA0C,cAAC,EAAD,IAAhC,cAAC,EAAD,CAAK1B,UAAWA,QChBpBmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.48e9e003.chunk.js","sourcesContent":["import React from 'react'\nimport { Icon } from \"@iconify/react\";\nimport locationIcon from '@iconify/icons-mdi/campfire';\n\nfunction LocationMarker({ lat, lng, onClick }) {\n    return (\n        <div className=\"location-maker\" onClick={onClick}>\n            <Icon icon={locationIcon} className=\"location-icon\"/>\n        </div>\n    )\n}\n\nexport default LocationMarker\n","const LocationInfoBox = ({ info }) => {\n    return (\n        <div className=\"location-info\">\n            <h2>Event Location Info</h2>\n            <ul>\n    <li>ID: <strong>{ info.id }</strong></li>\n    <li>TITLE: <strong>{ info.title }</strong></li>\n            </ul>\n        </div>\n    )\n}\n\nexport default LocationInfoBox\n","import { useState } from 'react'\nimport GoogleMapReact from 'google-map-react'\nimport LocationMarker from './LocationMarker'\nimport LocationInfoBox from './LocationInfoBox'\n\nconst Map = ({ eventData, center, zoom }) => {\n    const [locationInfo, setLocationInfo] = useState(null)\n\n    const markers = eventData.map((ev, index) => {\n        if(ev.categories[0].id === 8) {\n            return <LocationMarker key={index} lat={ev.geometries[0].coordinates[1]} lng={ev.geometries[0].coordinates[0]} onClick={() => setLocationInfo({ id: ev.id, title: ev.title })} />\n        }\n        return null\n    })\n\n    return (\n        <div className=\"map\">\n                  <GoogleMapReact\n                bootstrapURLKeys={{ key: process.env.REACT_APP_MAP_KEY }}\n                defaultCenter={ center }\n                defaultZoom={ zoom }\n            >\n                {markers}\n            </GoogleMapReact>\n            {locationInfo && <LocationInfoBox info={locationInfo} />}\n        </div>\n    )\n\n}\n\nMap.defaultProps = {\n    center: {\n        lat: 34.6790476,\n        lng: -1.9324731\n    },\n    zoom: 6\n}\n\nexport default Map\n","export default __webpack_public_path__ + \"static/media/logo.223e1344.gif\";","import spinner from './logo.gif'\n\nexport const Loader = () => {\n    return (\n        <div className=\"loader\">\n            <img src={spinner} alt=\"loader\"/>\n            \n        </div>\n    )\n}\n\nexport default Loader","import React from 'react'\nimport { Icon } from '@iconify/react'\nimport locationIcon from '@iconify/icons-mdi/campfire'\n\nfunction Header() {\n    return (\n        <header className=\"header\">\n            <h1>\n                <Icon className=\"header__icon\" icon={locationIcon} />\n                Wildfire Tracker (Powered By B3ns44d)\n            </h1>\n        </header>\n    )\n}\n\nexport default Header;","import { useState, useEffect } from 'react';\nimport Map from './app/Map';\nimport Loader from './app/Loader';\nimport Header from './app/Header';\n// import GoogleMap from './GoogleMap'\n\nfunction App() {\n  const [eventData, setEventData] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      setLoading(true)\n      const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\n      const { events } = await res.json()\n\n      setEventData(events)\n      setLoading(false)\n    }\n\n    fetchEvents()\n  }, [])\n\n  return (\n    <div>\n      <Header/>\n\n      {/* <GoogleMap/> */}\n      { !loading ? <Map eventData={eventData} /> : <Loader /> }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}